// <auto-generated />
using System;
using Olahrago.ApiLayer.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Olahrago.ApiLayer.Migrations
{
    [DbContext(typeof(OlahragoContext))]
    [Migration("20180811052354_OlahragoMigartion")]
    partial class OlahragoMigartion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ApiLayer.Model.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("AccountType")
                        .HasColumnName("account_type");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(32);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("ApiLayer.Model.Court", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("CourtType")
                        .HasColumnName("court_type");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<long>("PlaygroundId")
                        .HasColumnName("playground_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<int>("SizeType")
                        .HasColumnName("size_type");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("court");
                });

            modelBuilder.Entity("ApiLayer.Model.Owner", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("IdentityNumber")
                        .HasColumnName("identity_number");

                    b.Property<int?>("IdentityType")
                        .HasColumnName("identity_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(15);

                    b.HasKey("AccountId");

                    b.ToTable("owner");
                });

            modelBuilder.Entity("ApiLayer.Model.Playground", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasMaxLength(100);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnName("contact")
                        .HasMaxLength(15);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasMaxLength(40);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(40);

                    b.Property<string>("Regency")
                        .IsRequired()
                        .HasColumnName("regency")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("playground");
                });

            modelBuilder.Entity("ApiLayer.Model.User", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(15);

                    b.HasKey("AccountId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ApiLayer.Model.Owner", b =>
                {
                    b.HasOne("ApiLayer.Model.Account", "Account")
                        .WithOne("Owner")
                        .HasForeignKey("ApiLayer.Model.Owner", "AccountId")
                        .HasConstraintName("owner_account_fk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApiLayer.Model.User", b =>
                {
                    b.HasOne("ApiLayer.Model.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("ApiLayer.Model.User", "AccountId")
                        .HasConstraintName("user_account_fk")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
